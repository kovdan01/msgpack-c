name: CI

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
    - cpp_master
    tags:
    - '*'

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        pattern: [0, 1, 2, 3]
        cxx: [17]
    steps:
    - uses: actions/checkout@v1

    - name: Install boost
      run: brew install boost

    - name: Build and test
      env:
        CXX: clang++
      shell: bash
      run: |
        BASE=`pwd`;

        if [ "${{ matrix.cxx }}" == "0" ]; then
          export MSGPACK_CXX_VERSION="MSGPACK_CXX11=OFF"
        elif [ "${{ matrix.cxx }}" == "11" ]; then
          export MSGPACK_CXX_VERSION="MSGPACK_CXX11=ON"
        elif [ "${{ matrix.cxx }}" == "17" ]; then
          export MSGPACK_CXX_VERSION="MSGPACK_CXX17=ON"
        elif [ "${{ matrix.cxx }}" == "20" ]; then
          export MSGPACK_CXX_VERSION="MSGPACK_CXX20=ON"
        else
          echo "Unsupported C++ version"
          exit 1
        fi

        # matrix config
        if [ ${{ matrix.pattern }} == 0 ]; then
          ACTION="ci/build_cmake.sh"
          export ARCH="64"
          export CHAR_SIGN="unsigned"
          export API_VERSION="1"
          export SANITIZE="-fsanitize=undefined -fno-sanitize-recover=all"
        fi
        if [ ${{ matrix.pattern }} == 1 ]; then
          ACTION="ci/build_cmake.sh"
          export ARCH="64"
          export CHAR_SIGN="signed"
          export API_VERSION="3"
          export SANITIZE="-fsanitize=undefined -fno-sanitize-recover=all"
        fi
        if [ ${{ matrix.pattern }} == 2 ]; then
          ACTION="ci/build_cmake.sh"
          export ARCH="64"
          export CHAR_SIGN="signed"
          export API_VERSION="2"
          export SANITIZE="-fsanitize=undefined -fno-sanitize-recover=all"
        fi
        if [ ${{ matrix.pattern }} == 3 ]; then
          ACTION="ci/build_cmake.sh"
          export ARCH="64"
          export CHAR_SIGN="unsigned"
          export API_VERSION="2"
          export SANITIZE="-fsanitize=undefined -fno-sanitize-recover=all"
        fi

        # build and test
        CMAKE_CXX_COMPILER="${CXX}" CMAKE_PREFIX_PATH="$(brew --prefix)/Cellar/" CXXFLAGS="-Werror -g ${SANITIZE}" ${ACTION}
        cat Files.cmake| grep ".*\.[h|hpp]" | perl -pe 's/ //g' | sort > tmp1  && find include -name "*.h" -o -name "*.hpp" | sort > tmp2 && diff tmp1 tmp2

  linux:
    name: ${{ format('{0} arch={1} cxx{2} san={3} api={4} char={5} x3={6}', matrix.compiler, matrix.arch, matrix.cxx, matrix.sanitize, matrix.api, matrix.char_sign, matrix.x3_parse) }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        action: ["ci/build_cmake.sh"]
        compiler: ["g++", "clang++"]
        arch: [32, 64]
        cxx: [0, 11, 17, 20]  # 0 stands for C++03 or lower
        sanitize: ["no", "undefined"]
        api: [1, 2, 3]
        char_sign: ["unsigned", "signed"]
        x3_parse: ["OFF"]
    steps:
    - uses: actions/checkout@v1

    - name: Install build dependencies
      shell: bash
      run: |
        if [ ${{ matrix.arch }} == 32 ]; then
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install lib32z1-dev
          sudo apt-get install libpsm-infinipath1:i386
          sudo apt-get install libopenmpi3:i386
          sudo apt-get install libboost-mpi1.71.0:i386
          sudo apt-get install libboost-graph-parallel1.71.0:i386
          sudo apt-get install libboost-graph-parallel1.71-dev:i386
          sudo apt-get install gfortran-mod-15:i386
          sudo apt-get install libevent-dev:i386
          sudo apt-get install libopenmpi-dev:i386
          sudo apt-get install mpi-default-dev:i386
          sudo apt-get install libboost-mpi1.71-dev:i386
          sudo apt-get install libboost-mpi-python1.71-dev:i386
          sudo apt-get install python3-dev:i386
          sudo apt-get install libboost-python1.71-dev:i386
          sudo apt-get install libboost1.71-all-dev:i386
          sudo apt-get install libgtest-dev:i386
        else
          sudo apt-get update
          sudo apt-get install libboost1.71-all-dev
          sudo apt-get install libgtest-dev
        fi
        sudo apt-get install g++-multilib valgrind

    - name: Build and test
      shell: bash
      run: |
        BASE=`pwd`;

        export ACTION="${{ matrix.action }}"
        export CXX="${{ matrix.compiler }}"
        export ARCH="${{ matrix.arch }}"

        if [ "${{ matrix.cxx }}" == "0" ]; then
          export MSGPACK_CXX_VERSION="MSGPACK_CXX11=OFF"
        elif [ "${{ matrix.cxx }}" == "11" ]; then
          export MSGPACK_CXX_VERSION="MSGPACK_CXX11=ON"
        elif [ "${{ matrix.cxx }}" == "17" ]; then
          export MSGPACK_CXX_VERSION="MSGPACK_CXX17=ON"
        elif [ "${{ matrix.cxx }}" == "20" ]; then
          export MSGPACK_CXX_VERSION="MSGPACK_CXX20=ON"
        else
          echo "Unsupported C++ version"
          exit 1
        fi

        if [ "${{ matrix.sanitize }}" != "no" ]; then
          export SANITIZE="-fsanitize=${{ matrix.sanitize }} -fno-sanitize-recover=all"
        fi

        export API_VERSION="${{ matrix.api }}"
        export CHAR_SIGN="${{ matrix.char_sign }}"
        export X3_PARSE="${{ matrix.x3_parse }}"

        # build and test
        CMAKE_CXX_COMPILER="${CXX}" CXXFLAGS="-Werror -g ${SANITIZE}" ${ACTION}
        cat Files.cmake| grep ".*\.[h|hpp]" | perl -pe 's/ //g' | sort > tmp1  && find include -name "*.h" -o -name "*.hpp" | sort > tmp2 && diff tmp1 tmp2

  windows:
    runs-on: windows-2016
    strategy:
      fail-fast: false
      matrix:
        pattern: [0, 11, 17, 20]
    steps:
    - uses: actions/checkout@v1

    - name: Cache vcpkg
      id: cache-vcpkg
      uses: actions/cache@v1.0.3
      with:
        path: C:/vcpkg/installed/x64-windows
        key: ${{ runner.os }}-vcpkg

    - name: Build dependencies
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        vcpkg update
        vcpkg install gtest:x64-windows
        vcpkg install zlib:x64-windows
        vcpkg install boost:x64-windows

    - name: Build and test
      shell: powershell
      run: |
        if (${{ matrix.pattern }} -eq 20) {
          $CPPVER="-DMSGPACK_CXX20=ON"
        }
        if (${{ matrix.pattern }} -eq 17) {
          $CPPVER="-DMSGPACK_CXX17=ON"
        }
        if (${{ matrix.pattern }} -eq 11) {
          $CPPVER="-DMSGPACK_CXX11=ON"
        }
        if (${{ matrix.pattern }} -eq 0) {
          $CPPVER="-DMSGPACK_CXX11=OFF"
        }

        $CUR=(Get-Location).Path
        md build
        cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" $CPPVER "-DCMAKE_CXX_FLAGS=/D_VARIADIC_MAX=10 /EHsc /D_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING" ..
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
        cmake --build . --config Release
        $pathbak="$env:PATH"
        $env:PATH="C:\vcpkg\installed\x64-windows\bin;$CUR\build\Release;$pathbak"
        ctest -V
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
        $env:PATH=$pathbak
