name: CI

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
    - cpp_master
    tags:
    - '*'

jobs:
  macos:
    name: ${{ format('macOS arch={0} cxx{1} san={2} api={3} char={4} x3={5}', matrix.arch, matrix.cxx, matrix.sanitize, matrix.api, matrix.char_sign, matrix.x3_parse) }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [64]
        cxx: [98, 11, 14, 17, 20]
        sanitize: ["no", "undefined"]
        api: [1, 2, 3]
        char_sign: ["unsigned", "signed"]
        x3_parse: ["OFF", "ON"]
    steps:
    - uses: actions/checkout@v1

    - name: Cache boost
      id: cache-boost
      uses: actions/cache@v1
      with:
        path: ~/boost-prefix/
        key: ${{ runner.os }}-boost-1-76-0-20210612

    - name: Build boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: ./.github/depends/boost.sh -b ${{ matrix.arch }} -t clang -p $HOME/boost-prefix/

    - name: Cache zlib
      id: cache-zlib
      uses: actions/cache@v1
      with:
        path: ~/zlib-prefix/
        key: ${{ runner.os }}-zlib-${{ matrix.arch }}-1-2-11-20210623

    - name: Build zlib
      if: steps.cache-zlib.outputs.cache-hit != 'true'
      run: ./.github/depends/zlib.sh -b ${{ matrix.arch }} -p $HOME/zlib-prefix/

    - name: Build and test
      shell: bash
      run: |
        if [[ "${{ matrix.cxx }}" -lt "14" && "${{ matrix.x3_parse }}" == "ON" ]]; then
          echo "X3 parse is only supported with C++14 or newer - skip this configuration"
          exit 0
        fi

        export ARCH="${{ matrix.arch }}"
        export API_VERSION="${{ matrix.api }}"
        export CHAR_SIGN="${{ matrix.char_sign }}"
        export X3_PARSE="${{ matrix.x3_parse }}"

        if [ "${{ matrix.cxx }}" == "98" ]; then
          export MSGPACK_CXX_VERSION="MSGPACK_CXX11=OFF"
        else
          export MSGPACK_CXX_VERSION="MSGPACK_CXX${{ matrix.cxx }}=ON"
        fi

        if [ "${{ matrix.sanitize }}" != "no" ]; then
          export SANITIZE="-fsanitize=${{ matrix.sanitize }} -fno-sanitize-recover=all"
        fi

        # build and test
        export CXX="clang++"
        CMAKE_CXX_COMPILER="$CXX" CXXFLAGS="-Werror -g ${SANITIZE}" ci/build_cmake.sh

        cat Files.cmake| grep ".*\.[h|hpp]" | perl -pe 's/ //g' | sort > tmp1  && find include -name "*.h" -o -name "*.hpp" | sort > tmp2 && diff tmp1 tmp2

  linux:
    name: ${{ format('Linux {0} arch={1} cxx{2} san={3} api={4} char={5} x3={6}', matrix.compiler, matrix.arch, matrix.cxx, matrix.sanitize, matrix.api, matrix.char_sign, matrix.x3_parse) }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        arch: [32, 64]
        cxx: [98, 11, 14, 17, 20]
        sanitize: ["no", "undefined"]
        api: [1, 2, 3]
        char_sign: ["unsigned", "signed"]
        x3_parse: ["OFF", "ON"]
    steps:
    - uses: actions/checkout@v2

    - name: Install build dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install g++-10 cmake valgrind -y
        if [ ${{ matrix.arch }} == 32 ]; then
          sudo apt-get install g++-10-multilib -y
        fi
        ./ci/set_gcc_10.sh

    - name: Cache boost
      id: cache-boost
      uses: actions/cache@v1
      with:
        path: ~/boost-prefix/
        key: ${{ runner.os }}-boost-${{ matrix.arch }}-1-76-0-20210613

    - name: Build boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: ./.github/depends/boost.sh -b ${{ matrix.arch }} -t gcc -p $HOME/boost-prefix/

    - name: Cache zlib
      id: cache-zlib
      uses: actions/cache@v1
      with:
        path: ~/zlib-prefix/
        key: ${{ runner.os }}-zlib-${{ matrix.arch }}-1-2-11-20210613

    - name: Build zlib
      if: steps.cache-zlib.outputs.cache-hit != 'true'
      run: ./.github/depends/zlib.sh -b ${{ matrix.arch }} -p $HOME/zlib-prefix/

    - name: Build and test
      shell: bash
      run: |
        if [[ "${{ matrix.cxx }}" -lt "14" && "${{ matrix.x3_parse }}" == "ON" ]]; then
          echo "X3 parse is only supported with C++14 or newer - skip this configuration"
          exit 0
        fi

        export ARCH="${{ matrix.arch }}"
        export API_VERSION="${{ matrix.api }}"
        export CHAR_SIGN="${{ matrix.char_sign }}"
        export X3_PARSE="${{ matrix.x3_parse }}"

        if [ "${{ matrix.cxx }}" == "98" ]; then
          export MSGPACK_CXX_VERSION="MSGPACK_CXX11=OFF"
        else
          export MSGPACK_CXX_VERSION="MSGPACK_CXX${{ matrix.cxx }}=ON"
        fi

        if [ "${{ matrix.sanitize }}" != "no" ]; then
          export SANITIZE="-fsanitize=${{ matrix.sanitize }} -fno-sanitize-recover=all"
        fi

        # build and test

        # g++
        export CXX="g++-10"
        CMAKE_CXX_COMPILER="$CXX" CXXFLAGS="-Werror -g ${SANITIZE}" ci/build_cmake.sh

        # clang++
        export CXX="clang++-10"
        CMAKE_CXX_COMPILER="$CXX" CXXFLAGS="-Werror -g ${SANITIZE}" ci/build_cmake.sh

        cat Files.cmake| grep ".*\.[h|hpp]" | perl -pe 's/ //g' | sort > tmp1  && find include -name "*.h" -o -name "*.hpp" | sort > tmp2 && diff tmp1 tmp2

  windows:
    name: ${{ format('Windows cxx{0}', matrix.cxx) }}
    runs-on: windows-2016
    strategy:
      fail-fast: false
      matrix:
        cxx: [98, 11, 14, 17, 20]
    steps:
    - uses: actions/checkout@v1

    - name: Cache vcpkg
      id: cache-vcpkg
      uses: actions/cache@v1.0.3
      with:
        path: C:/vcpkg/installed/x64-windows
        key: ${{ runner.os }}-vcpkg

    - name: Build dependencies
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        vcpkg update
        vcpkg install zlib:x64-windows
        vcpkg install boost:x64-windows

    - name: Build and test
      shell: powershell
      run: |
        if (${{ matrix.cxx }} -eq 98) {
          $CPPVER="MSGPACK_CXX11=OFF"
        }
        else {
          $CPPVER="MSGPACK_CXX${{ matrix.cxx }}=ON"
        }

        md build
        cmake `
            -A x64 `
            -D CMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" `
            -D MSGPACK_BUILD_TESTS=ON `
            -D $CPPVER `
            -D CMAKE_CXX_FLAGS="/D_VARIADIC_MAX=10 /EHsc /D_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING" `
            -B build `
            -S .
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        cmake --build build --config Release
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        ctest -VV --test-dir build -C Release
        echo $LastExitCode
        echo "LAST EXIT CODE"
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
